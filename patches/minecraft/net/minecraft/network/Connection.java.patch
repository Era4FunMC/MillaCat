--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -75,8 +_,8 @@
    });
    private final PacketFlow f_129466_;
    private final Queue<Connection.PacketHolder> f_129467_ = Queues.newConcurrentLinkedQueue();
-   private Channel f_129468_;
-   private SocketAddress f_129469_;
+   public Channel f_129468_; // CatServer - private -> public
+   public SocketAddress f_129469_;
    private PacketListener f_129470_;
    private Component f_129471_;
    private boolean f_129472_;
@@ -87,15 +_,27 @@
    private float f_129477_;
    private int f_129478_;
    private boolean f_129479_;
+   private java.util.function.Consumer<Connection> activationHandler;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   // Spigot End
 
    public Connection(PacketFlow p_129482_) {
       this.f_129466_ = p_129482_;
    }
 
+   // Spigot Start
+   public SocketAddress getRawAddress() {
+      return this.f_129468_.remoteAddress();
+   }
+   // Spigot End
+
    public void channelActive(ChannelHandlerContext p_129525_) throws Exception {
       super.channelActive(p_129525_);
       this.f_129468_ = p_129525_.channel();
       this.f_129469_ = this.f_129468_.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.m_129498_(ConnectionProtocol.HANDSHAKING);
@@ -191,7 +_,7 @@
       ++this.f_129475_;
       if (connectionprotocol1 != connectionprotocol) {
          f_129465_.debug("Disabled auto read");
-         this.f_129468_.config().setAutoRead(false);
+         this.f_129468_.eventLoop().execute(()->this.f_129468_.config().setAutoRead(false));
       }
 
       if (this.f_129468_.eventLoop().inEventLoop()) {
@@ -270,7 +_,7 @@
 
    public void m_129507_(Component p_129508_) {
       if (this.f_129468_.isOpen()) {
-         this.f_129468_.close().awaitUninterruptibly();
+         this.f_129468_.close(); // We can't wait as this may be called from an event loop.
          this.f_129471_ = p_129508_;
       }
 
@@ -289,7 +_,9 @@
    }
 
    public static Connection m_178300_(InetSocketAddress p_178301_, boolean p_178302_) {
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_178301_.getAddress());
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
       if (Epoll.isAvailable() && p_178302_) {
@@ -315,6 +_,7 @@
 
    public static Connection m_129493_(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(f_129464_.m_13971_()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_129557_) {
             p_129557_.pipeline().addLast("packet_handler", connection);
@@ -359,7 +_,7 @@
          if (this.f_129468_.pipeline().get("decompress") instanceof CompressionDecoder) {
             ((CompressionDecoder)this.f_129468_.pipeline().get("decompress")).m_182677_(p_129485_, p_182682_);
          } else {
-            this.f_129468_.pipeline().addBefore("decoder", "decompress", new CompressionDecoder(p_129485_, p_182682_));
+            this.f_129468_.pipeline().addAfter("splitter", "decompress", new CompressionDecoder(p_129485_, p_182682_)); // CatServer
          }
 
          if (this.f_129468_.pipeline().get("compress") instanceof CompressionEncoder) {
@@ -401,6 +_,14 @@
 
    public float m_129543_() {
       return this.f_129477_;
+   }
+
+   public Channel channel() {
+      return f_129468_;
+   }
+
+   public PacketFlow getDirection() {
+      return this.f_129466_;
    }
 
    static class PacketHolder {
