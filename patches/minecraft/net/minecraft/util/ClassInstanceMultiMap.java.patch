--- a/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/net/minecraft/util/ClassInstanceMultiMap.java
@@ -4,19 +_,20 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.AbstractCollection;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+
+import java.util.*;
 import java.util.Map.Entry;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.stream.Collector;
 import java.util.stream.Collectors;
 
 public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
    private final Map<Class<?>, List<T>> f_13527_ = Maps.newHashMap();
    private final Class<T> f_13528_;
    private final List<T> f_13529_ = Lists.newArrayList();
+   private final ReadWriteLock accessLock = new ReentrantReadWriteLock();
 
    public ClassInstanceMultiMap(Class<T> p_13531_) {
       this.f_13528_ = p_13531_;
@@ -26,10 +_,15 @@
    public boolean add(T p_13536_) {
       boolean flag = false;
 
-      for(Entry<Class<?>, List<T>> entry : this.f_13527_.entrySet()) {
-         if (entry.getKey().isInstance(p_13536_)) {
-            flag |= entry.getValue().add(p_13536_);
+      this.accessLock.writeLock().lock();
+      try {
+         for(Entry<Class<?>, List<T>> entry : this.f_13527_.entrySet()) {
+            if (entry.getKey().isInstance(p_13536_)) {
+               flag |= entry.getValue().add(p_13536_);
+            }
          }
+      }finally {
+         this.accessLock.writeLock().unlock();
       }
 
       return flag;
@@ -38,11 +_,16 @@
    public boolean remove(Object p_13543_) {
       boolean flag = false;
 
-      for(Entry<Class<?>, List<T>> entry : this.f_13527_.entrySet()) {
-         if (entry.getKey().isInstance(p_13543_)) {
-            List<T> list = entry.getValue();
-            flag |= list.remove(p_13543_);
+      this.accessLock.writeLock().lock();
+      try {
+         for(Entry<Class<?>, List<T>> entry : this.f_13527_.entrySet()) {
+            if (entry.getKey().isInstance(p_13543_)) {
+               List<T> list = entry.getValue();
+               flag |= list.remove(p_13543_);
+            }
          }
+      }finally {
+         this.accessLock.writeLock().unlock();
       }
 
       return flag;
@@ -52,26 +_,57 @@
       return this.m_13533_(p_13540_.getClass()).contains(p_13540_);
    }
 
+   public static <T> Collector<T, ?, List<T>> toList() {
+      return Collectors.toCollection(CopyOnWriteArrayList::new);
+   }
+
    public <S> Collection<S> m_13533_(Class<S> p_13534_) {
       if (!this.f_13528_.isAssignableFrom(p_13534_)) {
          throw new IllegalArgumentException("Don't know how to search for " + p_13534_);
-      } else {
-         List<? extends T> list = this.f_13527_.computeIfAbsent(p_13534_, (p_13538_) -> {
-            return this.f_13529_.stream().filter(p_13538_::isInstance).collect(Collectors.toList());
-         });
-         return (Collection<S>)Collections.unmodifiableCollection(list);
+      }
+
+      this.accessLock.writeLock().lock();
+      try {
+         if (!this.f_13527_.containsKey(p_13534_)){
+            this.f_13527_.put(p_13534_,this.f_13529_.stream().filter(p_13534_::isInstance).collect(toList()));
+         }
+      }finally {
+         this.accessLock.writeLock().unlock();
+      }
+
+      this.accessLock.readLock().lock();
+      try {
+            List<? extends T> list = this.f_13527_.get(p_13534_);
+            return (Collection<S>)Collections.unmodifiableCollection(list);
+      }finally {
+         this.accessLock.readLock().unlock();
       }
    }
 
    public Iterator<T> iterator() {
-      return (Iterator<T>)(this.f_13529_.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.f_13529_.iterator()));
+      this.accessLock.readLock().lock();
+      try {
+         return (Iterator<T>)(this.f_13529_.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(new ArrayList(this.f_13529_).iterator()));
+      }finally {
+         this.accessLock.readLock().unlock();
+      }
    }
 
    public List<T> m_13532_() {
-      return ImmutableList.copyOf(this.f_13529_);
+      this.accessLock.readLock().lock();
+      try {
+         return ImmutableList.copyOf(this.f_13529_);
+      }finally {
+         this.accessLock.readLock().unlock();
+      }
    }
 
    public int size() {
-      return this.f_13529_.size();
+      this.accessLock.readLock().lock();
+      try {
+         return this.f_13529_.size();
+      }finally {
+         this.accessLock.readLock().unlock();
+      }
    }
 }
