--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.dedicated;
 
+import catserver.server.Metrics;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -57,6 +_,12 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_18_R2.SpigotTimings;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -67,10 +_,10 @@
    public final List<ConsoleInput> f_139600_ = Collections.synchronizedList(Lists.newArrayList());
    @Nullable
    private QueryThreadGs4 f_139601_;
-   private final RconConsoleSource f_139602_;
+   public final RconConsoleSource f_139602_;
    @Nullable
    private RconThread f_139603_;
-   private final DedicatedServerSettings f_139604_;
+   public DedicatedServerSettings f_139604_;
    @Nullable
    private MinecraftServerGui f_139605_;
    @Nullable
@@ -89,19 +_,64 @@
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
+            if (!org.bukkit.craftbukkit.Main.useConsole) {
+               return;
+            }
+
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
-
+            // CraftBukkit start
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException exception) {
+               return;
+            }
+            // CraftBukkit end
             String s1;
             try {
-               while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_()) {
+                  s1 = bufferedreader.readLine();
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s1 == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s1.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
             }
-
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new org.bukkit.craftbukkit.v1_18_R2.util.ForwardLogHandler());
+      final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      // CraftBukkit end
+
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
@@ -119,6 +_,11 @@
          this.m_129993_(dedicatedserverproperties.f_139729_);
          this.m_129913_(dedicatedserverproperties.f_139730_);
       }
+      // Spigot start
+      this.m_129823_(new DedicatedPlayerList(this, this.f_129746_, this.f_129745_));
+      org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+      org.spigotmc.SpigotConfig.registerCommands();
+      // Spigot end
 
       this.m_129997_(dedicatedserverproperties.f_139733_);
       this.m_129999_(dedicatedserverproperties.f_139734_);
@@ -149,10 +_,22 @@
          return false;
       }
 
+      // CraftBukkit start
+      server.loadPlugins();
+      server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+      // CraftBukkit end
+
       if (!this.m_129797_()) {
          f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         if (org.spigotmc.SpigotConfig.bungee) {
+            DedicatedServer.f_139598_.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.f_139598_.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+         } else {
+            DedicatedServer.f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -163,15 +_,18 @@
       if (!OldUsersConverter.m_11106_(this)) {
          return false;
       } else {
-         this.m_129823_(new DedicatedPlayerList(this, this.m_206579_(), this.f_129745_));
          long i = Util.m_137569_();
          SkullBlockEntity.m_196700_(this.m_129927_(), this.m_129925_(), this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
          this.m_130006_();
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         Metrics.LoliServerMetrics.startMetrics(); // CatServer
+         new catserver.server.utils.VersionChecker(); // CatServer
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -184,9 +_,10 @@
          if (dedicatedserverproperties.f_139747_) {
             f_139598_.info("Starting remote control listener");
             this.f_139603_ = RconThread.m_11615_(this);
+            this.remoteConsole = new org.bukkit.craftbukkit.v1_18_R2.command.CraftRemoteConsoleCommandSender(this.f_139602_); // CraftBukkit
          }
 
-         if (this.m_139669_() > 0L) {
+         if (false && this.m_139669_() > 0L) { // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
             thread1.setName("Server Watchdog");
@@ -195,12 +_,13 @@
          }
 
          Items.f_41852_.m_6787_(CreativeModeTab.f_40754_, NonNullList.m_122779_());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.f_139721_) {
             MinecraftServerStatistics.m_18328_(this);
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -316,6 +_,7 @@
          this.f_139601_.m_7530_();
       }
 
+      Runtime.getRuntime().halt(0);
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -332,11 +_,18 @@
    }
 
    public void m_139665_() {
+      SpigotTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.f_139600_.isEmpty()) {
          ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_82117_(consoleinput.f_135929_, consoleinput.f_135928_);
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, consoleinput.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.f_135929_);
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
-
+      SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
    }
 
    public boolean m_6982_() {
@@ -439,6 +_,15 @@
       return this.m_7913_().f_139718_;
    }
 
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+
    public int m_6329_() {
       return this.m_7913_().f_139719_;
    }
@@ -518,13 +_,39 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
       this.f_139602_.m_11512_();
       this.m_18709_(() -> {
-         this.m_129892_().m_82117_(this.f_139602_.m_11514_(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, p_139644_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), f_139602_.m_11514_());
+         server.dispatchServerCommand(remoteConsole, serverCommand);
+         // CraftBukkit end
       });
       return this.f_139602_.m_11513_();
    }
@@ -543,6 +_,11 @@
 
    public boolean m_7779_(GameProfile p_139642_) {
       return false;
+   }
+
+   @Override //Forge: Enable formated text for colors in console.
+   public void m_6352_(net.minecraft.network.chat.Component message, java.util.UUID p_108776_) {
+      f_139598_.info(message.getString());
    }
 
    public int m_7186_(int p_139659_) {
