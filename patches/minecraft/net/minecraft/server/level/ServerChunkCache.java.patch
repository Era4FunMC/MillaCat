--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -1,25 +_,32 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.concurrentutil.map.SWMRLong2ObjectHashTable;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import me.earthme.millacat.hook.ServerThreadingHooks;
+import me.earthme.millacat.utils.TickThread;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -55,12 +_,10 @@
    public final ChunkMap f_8325_;
    private final DimensionDataStorage f_8333_;
    private long f_8334_;
-   private boolean f_8335_ = true;
-   private boolean f_8336_ = true;
+   public boolean f_8335_ = true;
+   public boolean f_8336_ = true;
    private static final int f_143226_ = 4;
-   private final long[] f_8337_ = new long[4];
-   private final ChunkStatus[] f_8338_ = new ChunkStatus[4];
-   private final ChunkAccess[] f_8339_ = new ChunkAccess[4];
+   private final SWMRLong2ObjectHashTable<ChunkAccess> loadedChunks = new SWMRLong2ObjectHashTable<>();
    @Nullable
    @VisibleForDebug
    private NaturalSpawner.SpawnState f_8340_;
@@ -83,6 +_,28 @@
       return this.f_8331_;
    }
 
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.f_8325_.m_140174_(ChunkPos.m_45589_(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunkNow() != null;
+   }
+   // CraftBukkit end
+
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.f_8329_.m_46473_().m_6180_("purge");
+      this.f_8327_.m_140776_();
+      this.m_8489_();
+      this.f_8329_.m_46473_().m_6182_("unload");
+      this.f_8325_.m_140280_(() -> true);
+      this.f_8329_.m_46473_().m_7238_();
+      //this.clearCache();
+   }
+   // CraftBukkit end
+
    @Nullable
    private ChunkHolder m_8364_(long p_8365_) {
       return this.f_8325_.m_140327_(p_8365_);
@@ -92,96 +_,78 @@
       return this.f_8325_.m_140368_();
    }
 
+   public void onChunkLoad(ChunkAccess chunk){
+      this.loadedChunks.put(chunk.m_7697_().m_45588_(),chunk);
+   }
+
+   public void onChunkUnload(ChunkAccess chunk){
+      this.loadedChunks.remove(chunk.m_7697_().m_45588_());
+   }
+
    private void m_8366_(long p_8367_, ChunkAccess p_8368_, ChunkStatus p_8369_) {
-      for(int i = 3; i > 0; --i) {
-         this.f_8337_[i] = this.f_8337_[i - 1];
-         this.f_8338_[i] = this.f_8338_[i - 1];
-         this.f_8339_[i] = this.f_8339_[i - 1];
-      }
-
-      this.f_8337_[0] = p_8367_;
-      this.f_8338_[0] = p_8369_;
-      this.f_8339_[0] = p_8368_;
+      this.loadedChunks.put(p_8368_.m_7697_().m_45588_(),p_8368_);
    }
 
    @Nullable
    public ChunkAccess m_7587_(int p_8360_, int p_8361_, ChunkStatus p_8362_, boolean p_8363_) {
-      if (Thread.currentThread() != this.f_8330_) {
-         return CompletableFuture.supplyAsync(() -> {
-            return this.m_7587_(p_8360_, p_8361_, p_8362_, p_8363_);
-         }, this.f_8332_).join();
+      if (Thread.currentThread() != this.f_8330_ && !TickThread.isTickThread()) {
+         return CompletableFuture.supplyAsync(() -> this.m_7587_(p_8360_, p_8361_, p_8362_, p_8363_), this.f_8332_).join();
       } else {
-         ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
-         profilerfiller.m_6174_("getChunk");
          long i = ChunkPos.m_45589_(p_8360_, p_8361_);
 
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.f_8337_[j] && p_8362_ == this.f_8338_[j]) {
-               ChunkAccess chunkaccess = this.f_8339_[j];
-               if (chunkaccess != null || !p_8363_) {
-                  return chunkaccess;
-               }
-            }
+         final ChunkAccess cachedChunk;
+         if ((cachedChunk = this.loadedChunks.get(i)) != null && cachedChunk instanceof LevelChunk){
+            return cachedChunk;
          }
 
-         profilerfiller.m_6174_("getChunkCacheMiss");
          CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_8456_(p_8360_, p_8361_, p_8362_, p_8363_);
          this.f_8332_.m_18701_(completablefuture::isDone);
-         ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
-            return p_8406_;
-         }, (p_8423_) -> {
+         ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> p_8406_, (p_8423_) -> {
             if (p_8363_) {
-               throw (IllegalStateException)Util.m_137570_(new IllegalStateException("Chunk not there when requested: " + p_8423_));
+               throw Util.m_137570_(new IllegalStateException("Chunk not there when requested: " + p_8423_));
             } else {
                return null;
             }
          });
-         this.m_8366_(i, chunkaccess1, p_8362_);
+         //this.storeInCache(i, chunkaccess1, p_8362_);
          return chunkaccess1;
       }
    }
 
    @Nullable
    public LevelChunk m_7131_(int p_8357_, int p_8358_) {
-      if (Thread.currentThread() != this.f_8330_) {
+      if (Thread.currentThread() != this.f_8330_ && !TickThread.isTickThread()) {
          return null;
       } else {
          this.f_8329_.m_46473_().m_6174_("getChunkNow");
          long i = ChunkPos.m_45589_(p_8357_, p_8358_);
 
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.f_8337_[j] && this.f_8338_[j] == ChunkStatus.f_62326_) {
-               ChunkAccess chunkaccess = this.f_8339_[j];
-               return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
-            }
+         final ChunkAccess cachedChunk;
+         if ((cachedChunk = this.loadedChunks.get(i)) != null && cachedChunk instanceof LevelChunk){
+            return (LevelChunk) cachedChunk;
          }
 
          ChunkHolder chunkholder = this.m_8364_(i);
-         if (chunkholder == null) {
-            return null;
-         } else {
-            Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.m_140080_(ChunkStatus.f_62326_).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
-            if (either == null) {
-               return null;
-            } else {
-               ChunkAccess chunkaccess1 = either.left().orElse((ChunkAccess)null);
+         if (chunkholder != null) {
+            if (chunkholder.currentlyLoading != null)
+               return chunkholder.currentlyLoading; // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+            Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.m_140080_(ChunkStatus.f_62326_).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>) null);
+            if (either != null) {
+               ChunkAccess chunkaccess1 = either.left().orElse((ChunkAccess) null);
                if (chunkaccess1 != null) {
-                  this.m_8366_(i, chunkaccess1, ChunkStatus.f_62326_);
+                  //this.storeInCache(i, chunkaccess1, ChunkStatus.FULL);
                   if (chunkaccess1 instanceof LevelChunk) {
-                     return (LevelChunk)chunkaccess1;
+                     return (LevelChunk) chunkaccess1;
                   }
                }
-
-               return null;
             }
          }
+         return null;
       }
    }
 
    private void m_8488_() {
-      Arrays.fill(this.f_8337_, ChunkPos.f_45577_);
-      Arrays.fill(this.f_8338_, (Object)null);
-      Arrays.fill(this.f_8339_, (Object)null);
+      this.loadedChunks.clear();
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_8431_(int p_8432_, int p_8433_, ChunkStatus p_8434_, boolean p_8435_) {
@@ -206,14 +_,19 @@
       long i = chunkpos.m_45588_();
       int j = 33 + ChunkStatus.m_62370_(p_8459_);
       ChunkHolder chunkholder = this.m_8364_(i);
-      if (p_8460_) {
+      // CraftBukkit start - don't add new ticket for currently unloading chunk
+      boolean currentlyUnloading = false;
+      if (chunkholder != null) {
+         ChunkHolder.FullChunkStatus oldChunkState = ChunkHolder.m_140083_(chunkholder.f_140006_);
+         ChunkHolder.FullChunkStatus currentChunkState = ChunkHolder.m_140083_(chunkholder.m_140093_());
+         currentlyUnloading = (oldChunkState.m_140114_(ChunkHolder.FullChunkStatus.BORDER) && !currentChunkState.m_140114_(ChunkHolder.FullChunkStatus.BORDER));
+      }
+      if (p_8460_ && !currentlyUnloading) {
+         // CraftBukkit end
          this.f_8327_.m_140792_(TicketType.f_9449_, chunkpos, j, chunkpos);
          if (this.m_8416_(chunkholder, j)) {
-            ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
-            profilerfiller.m_6180_("chunkLoad");
             this.m_8489_();
             chunkholder = this.m_8364_(i);
-            profilerfiller.m_7238_();
             if (this.m_8416_(chunkholder, j)) {
                throw (IllegalStateException)Util.m_137570_(new IllegalStateException("No chunk holder after ticket has been added"));
             }
@@ -224,7 +_,7 @@
    }
 
    private boolean m_8416_(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.m_140093_() > p_8418_;
+      return p_8417_ == null || p_8417_.f_140006_ > p_8418_; // CraftBukkit using oldTicketLevel for isLoaded checks
    }
 
    public boolean m_5563_(int p_8429_, int p_8430_) {
@@ -271,7 +_,7 @@
       if (!flag && !flag1) {
          return false;
       } else {
-         this.m_8488_();
+         //this.clearCache();
          return true;
       }
    }
@@ -293,25 +_,40 @@
       this.f_8325_.m_140318_(p_8420_);
    }
 
+   // CatServer start
+   private AtomicBoolean catserver$isSave = new AtomicBoolean(true);
+   public void close(boolean save) throws IOException {
+      this.catserver$isSave.set(save);
+      this.close();
+   }
+
    public void close() throws IOException {
-      this.m_8419_(true);
+      var save = this.catserver$isSave.getAndSet(true); // CatServer
+      if (save) {
+         this.m_8419_(true);
+      }
       this.f_8331_.close();
       this.f_8325_.close();
    }
+   // CatServer end
 
    public void m_201698_(BooleanSupplier p_201913_, boolean p_201914_) {
       this.f_8329_.m_46473_().m_6180_("purge");
+      this.f_8329_.timings.doChunkMap.startTiming(); // Spigot
       this.f_8327_.m_140776_();
       this.m_8489_();
+      this.f_8329_.timings.doChunkMap.stopTiming(); // Spigot
       this.f_8329_.m_46473_().m_6182_("chunks");
       if (p_201914_) {
          this.m_8490_();
       }
 
+      this.f_8329_.timings.doChunkUnload.startTiming(); // Spigot
       this.f_8329_.m_46473_().m_6182_("unload");
       this.f_8325_.m_140280_(p_201913_);
+      this.f_8329_.timings.doChunkUnload.stopTiming(); // Spigot
       this.f_8329_.m_46473_().m_7238_();
-      this.m_8488_();
+      //this.clearCache();
    }
 
    private void m_8490_() {
@@ -326,7 +_,7 @@
          ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
          profilerfiller.m_6180_("pollingChunks");
          int k = this.f_8329_.m_46469_().m_46215_(GameRules.f_46143_);
-         boolean flag1 = leveldata.m_6793_() % 400L == 0L;
+         boolean flag1 = f_8329_.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && leveldata.m_6793_() % f_8329_.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
          profilerfiller.m_6180_("naturalSpawnCount");
          int l = this.f_8327_.m_140816_();
          NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.m_186524_(l, this.f_8329_.m_8583_(), this::m_8370_, new LocalMobCapCalculator(this.f_8325_));
@@ -342,20 +_,23 @@
          }
 
          profilerfiller.m_6182_("spawnAndTick");
-         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_);
+         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_) && !f_8329_.m_6907_().isEmpty(); // CraftBukkit
          Collections.shuffle(list);
 
          for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
             LevelChunk levelchunk1 = serverchunkcache$chunkandholder.f_184028_;
             ChunkPos chunkpos = levelchunk1.m_7697_();
-            if (this.f_8329_.m_201916_(chunkpos) && this.f_8325_.m_183879_(chunkpos)) {
+            if ((this.f_8329_.m_201916_(chunkpos) && this.f_8325_.m_183879_(chunkpos)) || this.f_8327_.shouldForceTicks(chunkpos.m_45588_())) {
                levelchunk1.m_187632_(j);
-               if (flag2 && (this.f_8335_ || this.f_8336_) && this.f_8329_.m_6857_().m_61927_(chunkpos)) {
+               if (flag2 && (this.f_8335_ || this.f_8336_) && this.f_8329_.m_6857_().m_61927_(chunkpos) && this.f_8325_.anyPlayerCloseEnoughForSpawning(chunkpos, true)) { // Spigot
                   NaturalSpawner.m_47029_(this.f_8329_, levelchunk1, naturalspawner$spawnstate, this.f_8336_, this.f_8335_, flag1);
                }
 
                if (this.f_8329_.m_183438_(chunkpos.m_45588_())) {
-                  this.f_8329_.m_8714_(levelchunk1, k);
+                  //this.level.timings.doTickTiles.startTiming(); // Spigot
+                  //this.level.tickChunk(levelchunk1, k);
+                  //this.level.timings.doTickTiles.stopTiming(); // Spigot
+                  ServerThreadingHooks.postChunkTickTask(levelchunk1,k);
                }
             }
          }
@@ -371,7 +_,9 @@
          });
          profilerfiller.m_7238_();
          profilerfiller.m_7238_();
+         this.f_8329_.timings.tracker.startTiming(); // Spigot
          this.f_8325_.m_140421_();
+         this.f_8329_.timings.tracker.stopTiming(); // Spigot
       }
    }
 
@@ -421,11 +_,29 @@
    }
 
    public <T> void m_8387_(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-      this.f_8327_.m_140840_(p_8388_, p_8389_, p_8390_, p_8391_);
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+      this.f_8327_.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
    }
 
    public <T> void m_8438_(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-      this.f_8327_.m_140849_(p_8439_, p_8440_, p_8441_, p_8442_);
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+      this.f_8327_.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use addRegionTicket overload
+   public <T> void registerTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      addRegionTicket(type, pos, distance, value, true);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use removeRegionTicket overload
+   public <T> void releaseTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      removeRegionTicket(type, pos, distance, value, true);
    }
 
    public void m_6692_(ChunkPos p_8400_, boolean p_8401_) {
@@ -498,6 +_,8 @@
    }
 
    final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+      private final Lock runTaskLock = new ReentrantLock();
+
       MainThreadExecutor(Level p_8494_) {
          super("Chunk source main thread executor for " + p_8494_.m_46472_().m_135782_());
       }
@@ -523,13 +_,27 @@
          super.m_6367_(p_8502_);
       }
 
+      // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
       public boolean m_7245_() {
-         if (ServerChunkCache.this.m_8489_()) {
+         if (!this.runTaskLock.tryLock()){
             return true;
-         } else {
-            ServerChunkCache.this.f_8331_.m_9409_();
-            return super.m_7245_();
+         }
+
+         try {
+            if (ServerChunkCache.this.m_8489_()) {
+               return true;
+            } else {
+               ServerChunkCache.this.f_8331_.m_9409_();
+               return super.m_7245_();
+            }
+         } finally {
+            this.runTaskLock.unlock();
+            if (Thread.currentThread() == ServerChunkCache.this.f_8330_){
+               ServerChunkCache.this.f_8325_.callbackExecutor.run();
+               MinecraftServer.getServer().drainQueuedTasks();
+            }
          }
       }
+      // CraftBukkit end
    }
 }
